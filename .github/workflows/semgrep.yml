name: Semgrep Offline Security Scan with AI Enrichment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  semgrep:
    name: Offline Semgrep Scan + AI Enrichment
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync python3-pip
          python3 -m pip install semgrep requests

      - name: Setup SSH and Download Custom Rules
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 34.59.19.208 >> ~/.ssh/known_hosts
          rsync -avz -e "ssh -i ~/.ssh/id_rsa" \
            pranavanil123@34.59.19.208:/home/pranavanil123/testing/Semgrep-rules ./custom-semgrep-rules

      - name: Run Semgrep with Custom Rules (code-only)
        id: run_scan
        run: |
          mkdir -p security-reports
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)

          semgrep scan --config ./custom-semgrep-rules . \
            --exclude=custom-semgrep-rules \
            --exclude=.github \
            --json --json-output=security-reports/semgrep-results-${TIMESTAMP}.json

          echo "file_name=semgrep-results-${TIMESTAMP}.json" >> $GITHUB_OUTPUT

      - name: Enrich Semgrep Results with Gemini AI
        env:
          GEMENI_API_KEY: ${{ secrets.GEMENI_API_KEY }}
          FILE_NAME: ${{ steps.run_scan.outputs.file_name }}
        run: |
          cat > enrich_with_gemini.py << 'EOF'
          import json
          import os
          import time
          import requests

          api_key = os.getenv("GEMENI_API_KEY")
          file_name = "security-reports/" + os.getenv("FILE_NAME")

          with open(file_name, "r") as f:
              findings = json.load(f)

          prompt = f"""
          You are a security code reviewer.
          You will be given a JSON file containing Semgrep findings.
          For each finding, add a new field 'ai_fix' with a short, clear, and secure fix suggestion.
          Return the result as valid JSON only.
          Input JSON:
          {json.dumps(findings)}
          """

          url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent"
          headers = {
              "Content-Type": "application/json"
          }
          params = {
              "key": api_key
          }

          data = {
              "contents": [{"parts": [{"text": prompt}]}],
              "generationConfig": {
                  "temperature": 0.2,
                  "maxOutputTokens": 8192
              }
          }

          res = None
          for attempt in range(3):
              try:
                  res = requests.post(url, headers=headers, params=params, json=data)
                  if res.status_code == 503:
                      print(f"[Gemini] 503 Service Unavailable. Retrying in {2**attempt} seconds...")
                      time.sleep(2 ** attempt)
                      continue
                  res.raise_for_status()
                  break
              except requests.exceptions.RequestException as e:
                  print(f"[Gemini] Error: {e}. Retrying in {2**attempt} seconds...")
                  time.sleep(2 ** attempt)
          else:
              print("[Gemini] API unavailable after multiple attempts. Using original file as fallback.")
              enriched_file = "security-reports/enriched-" + os.getenv("FILE_NAME")
              with open(enriched_file, "w") as f:
                  json.dump(findings, f, indent=2)
              exit(0)

          response_json = res.json()

          output_text = ""
          if "candidates" in response_json and len(response_json["candidates"]) > 0:
              candidate = response_json["candidates"][0]
              if "message" in candidate and "content" in candidate["message"]:
                  output_text = candidate["message"]["content"]
              else:
                  print("[Gemini] 'message' or 'content' key missing in API response candidate:")
                  print(candidate)
          else:
              print("[Gemini] 'candidates' key missing or empty in API response:")
              print(response_json)

          if not output_text:
              print("[Gemini] No output text from API, using original findings as fallback.")
              enriched = findings
          else:
              try:
                  enriched = json.loads(output_text)
              except json.JSONDecodeError:
                  print("[Gemini] Returned invalid JSON. Using original findings as fallback.")
                  enriched = findings

          enriched_file = "security-reports/enriched-" + os.getenv("FILE_NAME")
          with open(enriched_file, "w") as f:
              json.dump(enriched, f, indent=2)

          print(f"Enriched file saved as {enriched_file}")
          EOF

          python3 enrich_with_gemini.py

      - name: Upload Raw and Enriched Results to VM
        run: |
          RAW_FILE=${{ steps.run_scan.outputs.file_name }}
          ENRICHED_FILE=enriched-${{ steps.run_scan.outputs.file_name }}

          scp -i ~/.ssh/id_rsa security-reports/$RAW_FILE \
            pranavanil123@34.59.19.208:/home/pranavanil123/findings/semgrep/

          scp -i ~/.ssh/id_rsa security-reports/$ENRICHED_FILE \
            pranavanil123@34.59.19.208:/home/pranavanil123/findings/semgrep/

      - name: Send Enriched Results to API
        run: |
          ENRICHED_FILE=enriched-${{ steps.run_scan.outputs.file_name }}
          curl -X POST https://391eb398-1c11-4d32-ab6f-92fd6dc89fe1-00-2ua28acjof5z6.kirk.replit.dev/api/upload/Sample-Project/sast \
            -H "Content-Type: application/json" \
            -d @security-reports/$ENRICHED_FILE
