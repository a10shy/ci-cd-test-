name: Semgrep Offline Security Scan with Hugging Face Enrichment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  semgrep:
    name: Offline Semgrep Scan + Hugging Face Enrichment
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync python3-pip
          python3 -m pip install semgrep requests

      - name: Run Semgrep with Custom Rules (code-only)
        id: run_scan
        run: |
          mkdir -p security-reports
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)

          semgrep scan --config=auto \
            --exclude=custom-semgrep-rules \
            --exclude=.github \
            --json --json-output=security-reports/semgrep-results-${TIMESTAMP}.json

          echo "file_name=semgrep-results-${TIMESTAMP}.json" >> $GITHUB_OUTPUT

      - name: Enrich Semgrep Results with Hugging Face API
        env:
          HF_API_TOKEN: ${{ secrets.HF_API_TOKEN }}
          FILE_NAME: ${{ steps.run_scan.outputs.file_name }}
        run: |
          cat > enrich_with_hf.py << 'EOF'
          import os
          import json
          import requests
          import time

          HF_API_TOKEN = os.getenv("HF_API_TOKEN")
          if not HF_API_TOKEN:
              raise RuntimeError("HF_API_TOKEN not set in secrets")

          model = "facebook/bart-large-cnn"  # Summarization model
          api_url = f"https://api-inference.huggingface.co/models/{model}"
          headers = {"Authorization": f"Bearer {HF_API_TOKEN}"}

          file_name = "security-reports/" + os.getenv("FILE_NAME")
          with open(file_name, "r") as f:
              findings = json.load(f)

          prompt = f"""
          You are a security code reviewer AI.

          Given the following Semgrep findings as JSON:

          {json.dumps(findings)}

          For each finding, add a new field "ai_fix" with a concise, actionable fix suggestion.

          Return ONLY valid JSON.
          """

          enriched_text = None
          for attempt in range(3):
              try:
                  resp = requests.post(api_url, headers=headers, json={"inputs": prompt})
                  if resp.status_code != 200:
                      raise RuntimeError(f"Hugging Face API Error: {resp.status_code} {resp.text}")
                  enriched_text = resp.json()[0]["summary_text"]
                  break
              except Exception as e:
                  print(f"[HF] Error: {e}, retrying in {2**attempt} seconds...")
                  time.sleep(2 ** attempt)

          if not enriched_text:
              print("[HF] No enrichment, using original findings.")
              enriched = findings
          else:
              try:
                  enriched = json.loads(enriched_text)
              except json.JSONDecodeError:
                  print("[HF] Returned invalid JSON, using original findings.")
                  enriched = findings

          enriched_file = "security-reports/enriched-" + os.getenv("FILE_NAME")
          with open(enriched_file, "w") as f:
              json.dump(enriched, f, indent=2)

          print(f"Enriched file saved as {enriched_file}")
          EOF

          python3 enrich_with_hf.py

      - name: Upload Raw and Enriched Results to VM
        run: |
          RAW_FILE=${{ steps.run_scan.outputs.file_name }}
          ENRICHED_FILE=enriched-${{ steps.run_scan.outputs.file_name }}

          scp -i ~/.ssh/id_rsa security-reports/$RAW_FILE \
            pranavanil123@34.59.19.208:/home/pranavanil123/findings/semgrep/

          scp -i ~/.ssh/id_rsa security-reports/$ENRICHED_FILE \
            pranavanil123@34.59.19.208:/home/pranavanil123/findings/semgrep/

      - name: Send Enriched Results to API
        run: |
          ENRICHED_FILE=enriched-${{ steps.run_scan.outputs.file_name }}
          curl -X POST https://391eb398-1c11-4d32-ab6f-92fd6dc89fe1-00-2ua28acjof5z6.kirk.replit.dev/api/upload/Sample-Project/sast \
            -H "Content-Type: application/json" \
            -d @security-reports/$ENRICHED_FILE
